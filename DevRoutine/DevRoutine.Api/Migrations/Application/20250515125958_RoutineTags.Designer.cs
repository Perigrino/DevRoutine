// <auto-generated />
using System;
using DevRoutine.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevRoutine.Api.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515125958_RoutineTags")]
    partial class RoutineTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dev_routine")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevRoutine.Api.Entities.Routine", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<DateTime?>("LastCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_completed_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_routines");

                    b.ToTable("routines", "dev_routine");
                });

            modelBuilder.Entity("DevRoutine.Api.Entities.RoutineTag", b =>
                {
                    b.Property<string>("RoutineId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("routine_id");

                    b.Property<string>("TagId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("RoutineId", "TagId")
                        .HasName("pk_routine_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_routine_tags_tag_id");

                    b.ToTable("routine_tags", "dev_routine");
                });

            modelBuilder.Entity("DevRoutine.Api.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name");

                    b.ToTable("tags", "dev_routine");
                });

            modelBuilder.Entity("DevRoutine.Api.Entities.Routine", b =>
                {
                    b.OwnsOne("DevRoutine.Api.Entities.Frequency", "Frequency", b1 =>
                        {
                            b1.Property<string>("RoutineId")
                                .HasColumnType("character varying(500)")
                                .HasColumnName("id");

                            b1.Property<int>("TimesPerPeriod")
                                .HasColumnType("integer")
                                .HasColumnName("frequency_times_per_period");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("frequency_type");

                            b1.HasKey("RoutineId");

                            b1.ToTable("routines", "dev_routine");

                            b1.WithOwner()
                                .HasForeignKey("RoutineId")
                                .HasConstraintName("fk_routines_routines_id");
                        });

                    b.OwnsOne("DevRoutine.Api.Entities.Milestone", "Milestone", b1 =>
                        {
                            b1.Property<string>("RoutineId")
                                .HasColumnType("character varying(500)")
                                .HasColumnName("id");

                            b1.Property<int>("Current")
                                .HasColumnType("integer")
                                .HasColumnName("milestone_current");

                            b1.Property<int>("Target")
                                .HasColumnType("integer")
                                .HasColumnName("milestone_target");

                            b1.HasKey("RoutineId");

                            b1.ToTable("routines", "dev_routine");

                            b1.WithOwner()
                                .HasForeignKey("RoutineId")
                                .HasConstraintName("fk_routines_routines_id");
                        });

                    b.OwnsOne("DevRoutine.Api.Entities.Target", "Target", b1 =>
                        {
                            b1.Property<string>("RoutineId")
                                .HasColumnType("character varying(500)")
                                .HasColumnName("id");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("target_unit");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("target_value");

                            b1.HasKey("RoutineId");

                            b1.ToTable("routines", "dev_routine");

                            b1.WithOwner()
                                .HasForeignKey("RoutineId")
                                .HasConstraintName("fk_routines_routines_id");
                        });

                    b.Navigation("Frequency")
                        .IsRequired();

                    b.Navigation("Milestone");

                    b.Navigation("Target")
                        .IsRequired();
                });

            modelBuilder.Entity("DevRoutine.Api.Entities.RoutineTag", b =>
                {
                    b.HasOne("DevRoutine.Api.Entities.Routine", null)
                        .WithMany("RoutineTags")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_tags_routines_routine_id");

                    b.HasOne("DevRoutine.Api.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_tags_tags_tag_id");
                });

            modelBuilder.Entity("DevRoutine.Api.Entities.Routine", b =>
                {
                    b.Navigation("RoutineTags");
                });
#pragma warning restore 612, 618
        }
    }
}
